package main

import (
	"log"

	pb "github.com/harshsharma2112/Go-Grpc-Project/proto"
	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials/insecure"
)

// this is bidirectional that why we need to defien port othereiwse if it is unary no need to defien the port
const (
	port = ":8080"
)

func main() {
	conn, err := grpc.NewClient("localhost"+port, grpc.WithTransportCredentials(insecure.NewCredentials()))
	if err != nil {
		log.Fatalf("failed to conenct %v", err)
	}
	defer conn.Close()
// factory function to create a new client
	// this is the client that we will use to call the server
	// pb.GreetServiceClient is the interface generated by the proto compiler
	// it has all the methods defined in the proto file
	// SayHello is the method we defined in the proto file
	client := pb.NewGreetServiceClient(conn)

	Names := &pb.Nameslist{
		Names: []string{"Akhil", "Alice", "BOb"},
	}
//you don’t need to implement the SayHello() method on the client — you just call it.
//method is already implememted in the client side you need to call it	
//SayHello(client) this is for unary api
    
	SayHelloServerStream(client,Names)

}
